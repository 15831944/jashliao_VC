isalnum　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
相容性 TC1　TC1.5　TC2　MSC3　MSC4　MSC5/QC　ANSI　UNIX V　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
用途:isalnum 常式檢查 ASCII 字元是否為文字字元。　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
語法:int isalnum(int c);　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
呼叫法:if(isalnum(c)!=0)printf("%c is alphanumeric\n",c); 　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
含括檔:#include<ctype.h>　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
說明:isalnum 巨集可找出整數型參數 c 的值是數字 (0-9)或小寫字母 (a-z)或大寫字母
(A-Z)。isalnum 只能處理 0-127 的 ASCII 字元及 EOF 字元。　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
回報值:如果 c 是字母, 則isalnum 傳回非 0 值, 不然傳回 0。　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
相關常式:isascii　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
範例:參看 Turbo C 程式設計寶典下篇第 107 頁。　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
isalpha　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
相容性 TC1　TC1.5　TC2　MSC3　MSC4　MSC5/QC　ANSI　UNIX V　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
用途:isalpha 巨集可檢查某一 ASCII 字元是否為字母。　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
語法:int isalpha(int c);　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
呼叫法:if(isalpha(c)!=0)printf("%c is letter\n",c); 　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
含括檔:#include<ctype.h>　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
說明:isalpha 巨集找出整數型參數 c 的內容是大寫 (A-Z)或小寫(a-z)字母。isalpha
也只能處理 0-127 及 EOF 字元。　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
回報值:如果 c 確為一字母, 則傳回非 0 值, 不然傳回 0。　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
相關常式:isascii 　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
範例:參看 Turbo C 程式設計寶典下篇第 108 頁。　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
isascii　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
相容性 TC1　TC1.5　TC2　MSC3　MSC4　MSC5/QC　ANSI　UNIX V　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
用途:isascii 巨集可找出任一整數是否為有效的 ASCII 字元。　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
語法:int isascii(int c);　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
呼叫法:if(isascii(c)!=0)printf("%d<-not ASCII value\n",c);　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
含括檔:#include<ctype.h>　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
說明: isascii 巨集可找出整數型參數 c 的值是否在 0-127 內。　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
回報值:若在 0-127 內, 傳回非 0 值, 不然傳回 0。　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
補充說明:isascii 不把擴充 ASCII 表當作 ASCII 碼。　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
相關常式:toascii　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
範例:參看 Turbo C 程式設計寶典下篇第 110 頁。　　　　　　　　　　　　　　　　
toascii　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
相容性 TC1　TC1.5　TC2　MSC3　MSC4　MSC5/QC　ANSI　UNIX V　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
用途:toascii 巨集可把任一整數轉換轉成有效的 ASCII 字元。　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
語法:int toascii(int c);　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
呼叫法:c=toascii(int_value);　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
含括檔:#include<ctype.h>　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
說明:toascii 把整數 c 的所有位元 (除了最低的 7 個位元之外)都設定為 0。　　　　
因此被轉換的值代表一個有效的 ASCII 字元。如果 c 已是一個 ASCII 字元　　　　　
, 則不受影響。這個巨集可用來去掉字元的高階位元 (如 WordStar 文書　　　　　　
程式中的字元, 這些位元是保存格式化資料用的)。　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
回報值:toascii 常式傳回轉換過的字元。　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
相關常式:isascii　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
範例:參看 Turbo C 程式設計寶典下篇第 116 頁。　　　　　　　　　　　　　　　　　
_tolower,tolower　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
相容性 TC1　TC1.5　TC2　MSC3　MSC4　MSC5/QC　ANSI　UNIX V　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
用途:_tolower 和 tolower 把大寫 ASCII 字母轉換成小寫 ASCII 字母。如果已確　　
定要轉換的字元是大寫的, 則可用 _tolower。　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
語法:int _tolower(int c); int tolower(int c);　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
呼叫法:c=_tolower('Q');　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
含括檔:#include<ctype.h>　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
說明:_tolower, tolower都用一套公式把大寫字母轉換成小寫字母。由於 tolower　　　
在轉換前,會先檢查是否為大寫字母, 因此用它比用  _tolower 安全些。　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
回報值:它們都傳回小寫字母。　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
相關常式:isascii,toupper　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
範例:參看 Turbo C 程式設計寶典下篇第 117 頁。　　　　　　　　　　　　　　　　　
_tolower,tolower　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
相容性 TC1　TC1.5　TC2　MSC3　MSC4　MSC5/QC　ANSI　UNIX V　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
用途:_tolower 和 tolower 把大寫 ASCII 字母轉換成小寫 ASCII 字母。如果已確　　
定要轉換的字元是大寫的, 則可用 _tolower。　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
語法:int _tolower(int c); int tolower(int c);　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
呼叫法:c=tolower('Q');　　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
含括檔:#include<ctype.h>　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
說明:_tolower, tolower都用一套公式把大寫字母轉換成小寫字母。由於 tolower　　　
在轉換前,會先檢查是否為大寫字母, 因此用它比用  _tolower 安全些。　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
回報值:它們都傳回小寫字母。　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
相關常式:isascii,toupper　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
範例:參看 Turbo C 程式設計寶典下篇第 117 頁。　　　　　　　　　　　　　　　　
_toupper, toupper　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
相容性 TC1　TC1.5　TC2　MSC3　MSC4　MSC5/QC　ANSI　UNIX V　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
用途:_toupper 和 toupper 把小寫 ASCII 字母轉換成大寫 ASCII 字母。如果已確　　　
定要轉換的字元是小寫的, 則可用 _toupper。　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
語法:int _toupper(int c); int toupper(int c);　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
呼叫法:c=_toupper('q');　　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
含括檔:#include<ctype.h>　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
說明:_toupper, toupper都用一套公式把小寫字母轉換成大寫字母。由於 toupper　　
在轉換前,會先檢查是否為小寫字母, 因此用它比用  _toupper 安全些。　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
回報值:它們都傳回大寫字母。　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
相關常式:isascii,tolower　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
範例:參看 Turbo C 程式設計寶典下篇第 118 頁。　　　　　　　　　　　　　　　　
_toupper, toupper　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
相容性 TC1　TC1.5　TC2　MSC3　MSC4　MSC5/QC　ANSI　UNIX V　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
用途:_toupper 和 toupper 把小寫 ASCII 字母轉換成大寫 ASCII 字母。如果已確　　　
定要轉換的字元是小寫的, 則可用 _toupper。　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
語法:int _toupper(int c); int toupper(int c);　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
呼叫法:c=toupper('q');　　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
含括檔:#include<ctype.h>　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
說明:_toupper, toupper都用一套公式把小寫字母轉換成大寫字母。由於 toupper　　
在轉換前,會先檢查是否為小寫字母, 因此用它比用  _toupper 安全些。　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
回報值:它們都傳回大寫字母。　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
相關常式:isascii,tolower　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
範例:參看 Turbo C 程式設計寶典下篇第 118 頁。　　　　　　　　　　　　　　　　
stpcpy　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　
相容性 TC1　TC1.5　TC2　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
用途:stpcpy 常式把一個字串抄到另一字串。它的作用和 strcpy 一樣, 但傳回值不同。
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
語法:char *stpcpy(char *string1,const char *string2);　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
呼叫法:stpcpy(dos_command,"DIR"); 　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
含括檔:#include<string.h> 　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
說明:stpcpy 常式把 string2 (以 \0 結束的 C 字串)抄到一個緩衝區內 (其位址　　　
由參數 string1 指定)。\0 也抄進去, 因此 string1 成為 string2 的抄本。　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
回報值:stpcpy 常式傳回抄本字串終點的指標 (也就是 string1+strlen(string2)。　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
補充說明:除了傳回值外, stpcpy 和 strcpy 一樣。　　　　　　　　　　　　　　　　
相關常式:strcat,strcpy,strdup　　　　　　　　　　　　　　　　　　　　　　　　　
範例:參看 Turbo C 程式設計寶典下篇第 129 頁。　　　　　　　　　　　　　　　　
strcat　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
相容性 TC1　TC1.5　TC2　MSC3　MSC4　MSC5/QC　ANSI　UNIX V　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
用途:strcat 常式把一個字串接到另一個後面。　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
語法:char *strcat(char *string1,const char *string2);　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
呼叫法:char metoo[7]="me ";strcat(metoo,"too); 　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
含括檔:#include<string.h>　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
說明:strcat 常式以 string1,string2 為參數。它把第 2 個字串接到第 1 個後面　　
, 而在終點加上  \0 結束。第 1 個字串的 \0 被去掉, 而 string1 變成 string1　　
及 string2 的結合體。你必需配置足夠的記憶體給新的 string1。如果記憶體不夠　　
, strcat 可能使資料被破壞, 程式失敗。　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
回報值:strcat 傳回指向 string1 的指標。　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
相關常式:strncat,strcpy,strdup 　　　　　　　　　　　　　　　　　　　　　　　　
範例:參看 Turbo C 程式設計寶典下篇第 130 頁。　　　　　　　　　　　　　　　　
strchr　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
相容性 TC1　TC1.5　TC2　MSC3　MSC4　MSC5/QC　ANSI　UNIX V　　　　　　　　　　
用途:strchr 常式在某一字串中找一個字元第 1 次出現的位置。　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
語法:char *strchr(const char *string,int c);　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
呼叫法:cost_is=strchr("Estimated cost=$120",'$'); 　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
含括檔:#include<string.h> 　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
說明:strchr 常式在 C 字串 string 中找字元 c 第 1 次出現的位置。\0 字元也　　
可找。　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
回報值:在找到後, strchr 傳回指向第 1 個位置的指標, 例如:　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　 printf("%s",strchr("Annul salary=$35,750",'$');　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
會印出 $35,750, 如果失敗, strchr 傳回 NULL。　　　　　　　　　　　　　　　　
相關常式:strrchr,strpbrk　　　　　　　　　　　　　　　　　　　　　　　　　　　
範例:參看 Turbo C 程式設計寶典下篇第 131 頁。　　　　　　　　　　　　　　　　　
strcmp　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
相容性 TC1　TC1.5　TC2　MSC3　MSC4　MSC5/QC　ANSI　UNIX V　　　　　　　　　　
用途:strcmp 常式比較兩個字串 (大小寫字母有分別)。　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
語法:char *strcmp(char *string1,const char *string2); 　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
呼叫法:if(strcmp(username,"sysmgr")!=0)exit(0); 　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
含括檔:#include<string.h>　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
說明:strcmp 以 C 字串 string1.string2 為參數。它用字典順序來比較這兩個　　　　
字串。strcmp 對大寫和小寫字母有不同處理, 這和 stricmp 不一樣。　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
回報值:strcmp 傳回指出 string1,string2 字典順序的關係。如果傳回 0 表示　　　
兩者相同。如果  string 1 在 string 2 前面, 則傳回小於 0 的值, 反之傳回　　　　
大於 0 的值, 如下:　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
result=strcmp("abc","xy"); 　　　　　　　　　　　　　　　　　　　　　　　　
result=strcmp("ABC","abc"); 　　　　　　　　　　　　　　　　　　　　　　　　　
相關常式:strncmp,strcmpi　　　　　　　　　　　　　　　　　　　　　　　　　　　
範例:參看 Turbo C 程式設計寶典下篇第 133 頁。　　　　　　　　　　　　　　　　
strcmpi　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
相容性 TC1　TC1.5　TC2　MSC3　MSC4　MSC5/QC　ANSI　UNIX V　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
用途:strcmpi 常式比較兩個字串 (不考慮大小寫)。　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
語法:char *strcmpi(char *string1,const char *string2); 　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
呼叫法:if(strcmpi(command,"delete")==0)do_delete(); 　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
含括檔:#include<string.h> 　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
說明:strcmpi 先把 string1, string2 的所有字母字元都轉換成小寫, 然後它　　　　
比較這兩個字串, 並傳回指示兩字串字典順序的值。　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
回報值:如果兩個字串相等, 傳回 0, 如果 string 1的字典順序在 string 2 前面　　
, 傳回小於 0 的值, 反之傳回大於 0 的值。因此 strcmpi("XYZ","xyz") 傳回 0。　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
相關常式:strnicmp,strcmp,stricmp 　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
範例:參看 Turbo C 程式設計寶典下篇第 134 頁。　　　　　　　　　　　　　　　　　
strcpy　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
相容性 TC1　TC1.5　TC2　MSC3　MSC4　MSC5/QC　ANSI　UNIX V　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
用途:strcpy 把一字串抄到另一個字串內。　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
語法:char *strcpy(char *string1,const char *string2); 　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
呼叫法:stpcpy(dos_command,"DIR"); 　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
含括檔:#include<string.h> 　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
說明:strcpy  把 string 2 抄入一個緩衝區內 (位址由 string1 提供)。\0 也抄入,　　
因此 string 1 完全是 string 2 的抄本。　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
回報值:strcpy 傳回指向 string 1 的指標。　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
補充說明:如果沒有配置足夠的記憶體給 string 1 , 則 strcpy ,strncpy 常式的　　　
使用可能對程式造成損害。　　　　　　　　　　　　　　　　　　　　　　　　　　　
相關常式:stpcpy,strdup　　　　　　　　　　　　　　　　　　　　　　　　　　　　
範例:參看 Turbo C 程式設計寶典下篇第 136 頁。　　　　　　　　　　　　　　　　　
strcspn　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
相容性 TC1　TC1.5　TC2　MSC3　MSC4　MSC5/QC　ANSI　UNIX V　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
用途:strcspn 常式用來找出字串中某一不合字元第 1 次出現的位置。　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
語法:char *strcspn(char *string1,const char *string2);　　　　　　　　　　　
呼叫法:first_q=strcspn("soliloquy","q");　　　　　　　　　　　　　　　　　　　
含括檔:#include<string.h>　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
說明:strcspn 常式用來找出 string1 中任一和 string2 不同字元第 1 次出現的　　　
位置。　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
回報值:成功時, strcspn 傳回 string1 中第 1 個字元 (和 string2 相同者)的　　　
索參。這個值是 string1 中子字串的長度 (此一子字串和 string2 的字元不同)。　　
    如果 string1 的第 1 個字元就和 string 2 不同, 則傳回 0。如果 string1　　　
的字元完全和 string2 的字元不同, 則傳回 string1 的長度。　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
相關常式:strpbrk,strspn　　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
範例:參看 Turbo C 程式設計寶典下篇第 137 頁。　　　　　　　　　　　　　　　　
strdup　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
相容性 TC1　TC1.5　TC2　MSC3　MSC4　MSC5/QC　ANSI　UNIX V　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
用途:strdup 常式配置記憶體, 把指定字串抄入此記憶體內。　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
語法:char *strdup(const char *string); 　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
呼叫法:saved_command=strdup(command); 　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
含括檔:#include<string.h>　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
說明:strdup 先叫用 malloc 常式配置足夠的記憶體, 然後把 string 抄到此記憶體內。
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
回報值:成功時, 傳回此新字串的位址。如果記憶體沒有配置好, 則傳回 NULL。　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
相關常式:strcat,strncpy　　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
範例:參看 Turbo C 程式設計寶典下篇第 138 頁。　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
strerror　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
相容性  TC1　TC1.5　TC2　MSC3　MSC4　MSC5/QC　ANSI　UNIX V　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
用途:strerror 常式取得某一示誤編號的示誤訊息。　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
語法:char *strerror(int errnum);　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
呼叫法:error_message=strerror(errno); 　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
含括檔:#include<string.h> 　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
說明:strerror 找出屬於示誤編號 (參數 errnum 提供)的示誤訊息。它用此　　　　　　
編號取得一個表格 (名為 sys_errlist 在 stdlib.h 中定義)的索參。在　　　　　　
常式傳回示誤編號後, 就應用 strerror 來找出示誤訊息。不過要把此訊息印　　　　
在螢幕上, 還得用 printf 常式。　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
回報值:strerror 傳回指到表格 sys_errlist 的指標。　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
相關常式:_strerror,perror　　　　　　　　　　　　　　　　　　　　　　　　　　　
範例:參看 Turbo C 程式設計寶典下篇第 139 頁。　　　　　　　　　　　　　　　　　
_strerror　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
相容性 　　 TC1.5　TC2　　　　　　　MSC5/QC　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
用途:_strerror 常式建立最近一個錯誤的示誤訊息 (包含系統設定的訊息和自己　　　
設定的訊息)。　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
語法:char *strerror(const char *string);　　　　　　　　　　　　　　　　　　　
呼叫法:error_message=_strerror("Error opening file");　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
含括檔:#include<string.h> 　　　　　　　　　　　　　　　　　　　　　　　　　　
說明:_strerror 常式建立一個示誤訊息 (在 string 後面接分號, 再接最近一個錯誤　
的系統示誤訊息)。string 的最大長度為 94 位元組, 如果 string 是 NULL,　　　　　
則_strerror 將只建立系統訊息。訊息後面都要用 \n 結束。　　　　　　　　　　　
    _strerror 從 errno 的值中取得表格 sys_errlist 的位址。在傳回錯誤後,　　　
就應立即叫用 _strerror 。不然另外的常式可能蓋掉 errno 的值。_strerror　　　　
只建立訊息, 要印在螢幕上, 還得用其他常式。　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
回報值:_strerror 傳回指到它所建立訊息的指標。　　　　　　　　　　　　　　　　
相關常式:strerror,perror 　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
範例:參看 Turbo C 程式設計寶典下篇第 140 頁。　　　　　　　　　　　　　　　　　
stricmp　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
相容性 TC1　TC1.5　TC2　　　　MSC4　MSC5/QC　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
用途:stricmp 常式比較兩個字串 (大寫或小寫字母都視為相等)。　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
語法:char *stricmp(char *string1,const char *string2);　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
呼叫法:if(stricmp(answer,"yes")==0) delete_file(fname);　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
含括檔:#include<string.h>　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
說明:stricmp 先把 string1, string2 的所有字母換成小寫字母, 再作比較, 並　　　　
照字典順序傳回一個值。　　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
回報值:如果 string1 和 string 2 相同, 則傳回 0, 若 string1 少於 string2　　　　
傳回小於 0 的值, 反之傳回大於 0 的值。　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
相關常式:strnicmp,strcmpi　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
範例:參看 Turbo C 程式設計寶典下篇第 142 頁。　　　　　　　　　　　　　　　　　
strlen　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
相容性 TC1　TC1.5　TC2　MSC3　MSC4　MSC5/QC　ANSI　UNIX V　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
用途:strlen 常式用來找出字串的長度 (以位元組為單位, 但不含終點的 \0 字元)。　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
語法:size_t strlen(const char *string); 　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
呼叫法:length=strlen(name);　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
含括檔:#include<string.h> 　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
說明:strlen 常式算出 string 的長度 (以位元組為單位, 不含 \0 字元)。　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
回報值:strlen 傳回以位元組為單位的 string 長度。　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
範例:參看 Turbo C 程式設計寶典下篇第 143 頁。　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
strlwr　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
相容性 TC1　TC1.5　TC2　MSC3　MSC4　MSC5/QC　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
用途:strlwr 把字串中的大寫字母轉換為小寫。　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
語法:char *strlwr(char *string);　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
呼叫法:char command[]="QUIT";strlwr(command); 　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
含括檔:#include<string.h> 　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
說明:strlwr 把 string 中的大寫母都轉換為小寫, 其他字母不受影響。　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
回報值:strlwr 傳回新字串的位址。　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
補充說明:strlwr 和 strupr 常式並非  ANSI 的標準常式, 你可用巨集 tolower,　　　
toupper 來作這些工作。　　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
相關常式: strupr,tolower 　　　　　　　　　　　　　　　　　　　　　　　　　　　
範例:參看 Turbo C 程式設計寶典下篇第 144 頁。　　　　　　　　　　　　　　　　
strncat　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
相容性 TC1　TC1.5　TC2　MSC3　MSC4　MSC5/QC　ANSI　UNIX V　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
用途:strncat 常式把一個字串中的指定字元接到另一個字串後面。　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
語法:char *strncat(char *string1,const char *string2,size_t n);　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
呼叫法:char id[16]="ID="; strncat(id,name,10);　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
含括檔:#include<string.h> 　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
說明:strncat 常式把 string2 的最前面 n 個字元接到 string 1 的後面, 然後加上　
\0。而 string 1 的 \0 被去掉, 新的字串仍名 string 1。如果  n 大於 string 2　　
的長度, 則把整個 string 2 加上去。　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
回報值:strncat 傳回指向新字串的指標。　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
相關常式:strcat,strcpy,strdup　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　  　　　　　　　　　　　　　　　　　　　　　　　　　　
範例:參看 Turbo C 程式設計寶典下篇第 145 頁。　　　　　　　　　　　　　　　　　
strncmp　　　　　　　　　　　　　　　　　　　　　
相容性 TC1　TC1.5　TC2　MSC3　MSC4　MSC5/QC　ANSI　UNIX V　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
用途:strncmp 比較兩個字串 (大小寫有別)。　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
語法:int *strncmp(char *string1,const char *string2,size_t n);　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
呼叫法:if(strncmp(command,"quit",2)==0) quit_program();　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
含括檔:#include<string.h> 　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
說明:strncmp 比較 string 1, string 2 最前面的 n 個字元。照字典順序比較　　　　
然後傳回一個整數。　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
回報值:如果 string 1 和 string 2 的 n 個字元相同, 傳回 0, 如果 string 1　　　
的 n 個字元字典順序小於 string 2 則傳回小於 0 的值, 反之傳回大於 0 的值。　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
相關常式:strcmp,strncmpi 　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
範例:參看 Turbo C 程式設計寶典下篇第 146 頁。　　　　　　　　　　　　　　　　　
strncpy　　　　　　　　　　　　　　　　　　　　　　　　　　　
相容性 TC1　TC1.5　TC2　MSC3　MSC4　MSC5/QC　ANSI　UNIX V　　　　　　　　　　　
用途:strncpy 常式把指定數目的字元抄到另一個字串。　　　　　　　　　　　　　　　
語法:char *strncpy(char *string1,const char *string2,size_t n);　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
呼叫法:strncpy(fname,"tmp12345678",8); 　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
含括檔:#include<string.h> 　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
說明:strncpy 把 string 2 最前面的 n 個字元抄到一個緩衝區內 (位址由　　　　　　
string 1 指定)。複製的工作由 string 1 第 1 個位置開始。如果 n 沒有　　　　　　
string 2 那麼長, 則不會把 \0 抄到 string 1 上。若 n 超過 string 2　　　　　　
, 則含 \0 在內的 string 2 都抄到 string 1 內。　　　　　　　　　　　　　　　　
   你應避免讓 string 2 有一部份和 string 1 重複, 否則 strncpy 無法正　　　　　
確工作。　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
回報值:strncpy 傳回指向 string 1 的指標。　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
相關常式:strcat,strcpy,strdup　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
範例:參看 Turbo C 程式設計寶典下篇第 148 頁。　　　　　　　　　　　　　　　　　
strnicmp　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
相容性 TC1　TC1.5　TC2　　　　MSC4　MSC5/QC　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
用途:strnicmp 比較兩字串指定數目的字元 (大小寫字母無區別)。　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
語法:int *strnicmp(char *string1,const char *string2,size_t n);　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
呼叫法:if (strnicmp(command,"exit",2) exit_program();　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
含括檔:#include<string.h>　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
說明:strnicmp 比較 string 1 和 string 2 最前面的 n 個字元 (不區分大小寫)。　　
並照兩個字串的字典順序傳值回來。　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
回報值:如果比較結果相等傳回 0 , 如果 string 1 小於 string 2 傳回小於 0　　　
的值, 反之傳回大於 0 的值。　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
相關常式:strcmpi,strcmp　　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
範例:參看 Turbo C 程式設計寶典下篇第 149 頁。　　　　　　　　　　　　　　　　　
strnset　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
相容性 TC1　TC1.5　TC2　MSC3　MSC4　MSC5/QC　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
用途:strnset 常式把字串中指定數目的字元設定為某一值 (不含 \0)。　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
語法:char *strnset(char *string,int c,size_t n);　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
呼叫法:strnset(all_zzz,'z',40);　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
含括檔:#include<string.h> 　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
說明:strnset 常式把參數 c 指定的字元抄到 string 最前面的 n 個字元。如果 n　　　
大於 string, 則除了 \0 外, string  的所有字元都設定為指定的字元。　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
回報值:strnset 傳回指到新字串的指標(名稱仍為 string)。　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
相關常式: strset　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
範例:參看 Turbo C 程式設計寶典下篇第 151 頁。　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
strpbrk　　　　　　　　　　　　　　　　　　　　　　
相容性 TC1　TC1.5　TC2　MSC3　MSC4　MSC5/QC　ANSI　UNIX V　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
用途:strpbrk 常式找出字串中某字元第 1 次出現的位置 (字元為第 2 字串的字元)。　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
語法:char *strpbrk(const char *string1,const char *string2);　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
呼叫法:first_vowel=strpbrk(word,"aeiou");　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
含括檔:#include<string.h> 　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
說明:strpbrk 在 string 1 中找 string 2 的字元 (不含 \0)。　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
回報值:找到時, 傳回指向 string 1 字元第 1 次出現的位置。若失敗, 傳回 NULL(　　
表示 string 1 和 string 2 沒有相同的字元)。　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
相關常式:strchr,strcspn　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
範例:參看 Turbo C 程式設計寶典下篇第 152 頁。　　　　　　　　　　　　　　　　　
strrchr　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
相容性 TC1　TC1.5　TC2　MSC3　MSC4　MSC5/QC　ANSI　UNIX V　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
用途:strrchr 常式在指定字串中找出指定字元最後出現的位置。　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
語法:char *strrchr(const char *string,int c);　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
呼叫法:char line_cost[]="10 units at $1.20 ea.=$12.00; 　　　　　　　　　　　　
　　　　total_cost=strrchr(line_cost,'$');　　　　　　　　　　　　　　　　　　
含括檔:#include<string.h> 　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
說明:strrchr 在 string 1 中找 c 最後出現的位置。\0 字元也可在尋找範圍。　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
回報值:成功時, 傳回指到此位置的指標。不然傳回 NULL。　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
相關常式:strchr　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
範例:參看 Turbo C 程式設計寶典下篇第 153 頁。　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
strrev　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
相容性 TC1　TC1.5　TC2　MSC3　MSC4　MSC5/QC　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
用途:strrev 常式把字串中字元的順序反過來。　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
語法:char *strrev(char *string);　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
呼叫法:strrev(input_string); 　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
含括檔:#include<string.h>　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
說明:strrev 把 string 中的字元順序反過來, 而 \0 不變。　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
回報值:strrev 傳回指向新字串的指標。　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
相關常式:strcpy,strncpy　　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
範例:參看 Turbo C 程式設計寶典下篇第 154 頁。　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
strset　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
相容性 TC1　TC1.5　TC2　MSC3　MSC4　MSC5/QC　ANSI　UNIX V　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
用途:strset 把一個字串中所有字元設定為一個值 (\0 除外)。　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
語法:char *strset(char *string,int c);　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
呼叫法:char password[16];　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　strset(password,'x'); 　　　　　　　　　　　　　　　　　　　　　　　　
含括檔:#include<string.h>　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
說明:strset 把 c 中的字元設定給 string 中的每一個字元 (\0 除外)。這可使　　
字串的值改變。　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
傳回值:strset 傳回指向 string 的指標。　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
相關常式:strnset 　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
範例:參看 Turbo C 程式設計寶典下篇第 155 頁。　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
strspn　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
相容性 TC1　TC1.5　TC2　MSC3　MSC4　MSC5/QC　ANSI　UNIX V　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
用途:strspn 常式找出字串中找出不等於另一字串字元第 1 次出現的位置 (字元為第 2
字串的字元)。　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
語法:size_t *strspn(char *string1,const char *string2);　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
呼叫法:char *input="280ZX";　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　first_nondigit_at=strspn(input,"1234567890"); 　　　　　　　　　　　　
含括檔:#include<string.h> 　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
說明:strspn 在 string 1 中找 string 2 的所沒有的字元 (不含 \0)。　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
回報值:成功時, 傳回指向 string 1 字元第 1 次出現的位置。若失敗, 傳回 NULL(　　
表示 string 1 和 string 2 有相同的字元)。　　　　　　　　　　　　　　　　　　
    如果 string 1 的第 1 個字元在 string 2 中沒有, 則傳回 0, 如果 string 1　　
的字元在 string 2中都有, 則傳回 string 1 的長度。　　　　　　　　　　　　
相關常式:strpbrk,strcspn　　　　　　　　　　　　　　　　　　　　　　　　　
範例:參看 Turbo C 程式設計寶典下篇第 156 頁。　　　　　　　　　　　　　　　　　
strstr　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
相容性 TC1　TC1.5　TC2　MSC3　MSC4　MSC5/QC　ANSI　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
用途:strstr 在一個字串中找另一個字串第 1 次出現的位置。　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
語法:char *strstr(char *string1,const char *string2); 　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
呼叫法:char input[]="The account number is MSCB-87-08-01", 　　　　　　　　　　
　　　　acc_no=strstr(input,"MSCB");　　　　　　　　　　　　　　　　　　　　　
含括檔:#include<string.h> 　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
說明:strstr 在 string 1 中找 string 2 第 1 次出現的位置。　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
回報值:成功時, 傳回指向此位置的指標, 失敗則傳回 NULL。　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
相關常式:strchr.strcspn　　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
範例:參看 Turbo C 程式設計寶典下篇第 157 頁。　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
strupr　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
相容性 TC1　TC1.5　TC2　MSC3　MSC4　MSC5/QC　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
用途:strupr 把字串中的小寫字母改成大寫。　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　
語法:char *strupr(char *string);　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
呼叫法:strupr("help"); 　　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
含括檔:#include<string.h>　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
說明:strupr 把字串中的小寫字母改成大寫, 其他不變。　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
回報值:strupr 傳回指到新字串的指標。　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
補充說明:strupr 和 strlwr 並非 ANSI 的標準, 可用 toupper,tolower 巨集　　　　　
來作它們的工作。　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
相關常式:strlwr,toupper　　　　　　　　　　　　　　　　　　　　　　　　　　　　
範例:參看 Turbo C 程式設計寶典下篇第 160 頁。　　　　　　　　　　　　　　　　　
lfind　　　　　　　　　　　　　　　　　　　　　　　　　
相容性 TC1　TC1.5　TC2　　　　MSC4　MSC5/QC　　　　UNIX V　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
用途:lfind 常式在陣列中作線性尋找, 此陣列有固定的成員數目, 每一成員有固定長度。
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
語法:char *lfind(const void*key,const void *base,size_t *num,size_t width 　　
　　　int (*compare)(const *elem1,const void *elem2); 　　　　　　　　　　　　
呼叫法:int mycompare(const void*,const void*);　　　　　　　　　　　　　　　　
　　　　result=(char**)lfind(keyword,envp,&count,sizeof(char*),mycompare);　　
含括檔:#include<stdlib.h>　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
說明:lfind 常式在一陣列中作線性尋找。此陣列的第 1 個位址是 base,有 num 個　　
成員, 每個成員有 width 個位元組。key 參數指定要尋找的值。　　　　　　　　　　
     compare 參數提供作比較常式的位址。這個比較常式取得 elem1,elem2 這兩個　
參數 (它們是指向陣列成員的指標)。在作過比較後, 如果相等, 則傳回 0, 不然傳回　
非 0 值。　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
回報值:若找到, lfind 傳回一個指標, 不然傳回 NULL。　　　　　　　　　　　　　
相關常式:lsearch,bsearch 　　　　　　　　　　　　　　　　　　　　　　　　　　　
範例:參看 Turbo C 程式設計寶典下篇第 173 頁。　　　　　　　　　　　　　　　　　
lsearch　　　　　　　　　　　　　　　　　　　　　　　　　　
相容性 TC1　TC1.5　TC2　　　　MSC4　MSC5/QC　　　　UNIX V　　　　　　　　　　　
用途:lsearch 在陣列中作線性尋找 , 陣列有固定的成員 (有固定長度)。若　　　　　
找不到, 則把要找的值加入陣列內。　　　　　　　　　　　　　　　　　　　　　　
語法:char *lsearch(const void*key,const void *base,size_t *num,size_t width
　　　int (*compare)(const *elem1,const void *elem2); 　　　　　　　　　　　　
呼叫法:int client_mycompare(const void*,const void*);　　result= 　　　　
(char**)lsearch(client_name,client_table,&count,sizeof(char*),client_compare);
含括檔:#include<stdlib.h>　　　　　　　　　　　　　　　　　　　　　　　　　　　
說明:lsearch 常式在一陣列中作線性尋找。此陣列的第 1 個位址是 base,有 num 個　
成員, 每個成員有 width 個位元組。key 參數指定要尋找的值。　　　　　　　　　　
     compare 參數提供作比較常式的位址。這個比較常式取得 elem1,elem2 這兩個　　
參數 (它們是指向陣列成員的指標)。在作過比較後, 如果相等, 則傳回 0, 不然傳回　
非 0 值。　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
回報值:若找到, lsearch 傳回第 1 次出現的位址, 若沒有找到, 則把要找的項目放在　
陣列後面, 改變 num 的值, 並傳回指到此新項的指標。若不想加入, 則用 lfind 常式　
即可。　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
相關常式:lfind,bsearch 　　　　　　　　　　　　　　　　　　　　　　　　　　　　
範例:參看 Turbo C 程式設計寶典下篇第 175 頁。　　　　　　　　　　　　　　　　
qsort　　　　　　　　　　　　　　　　　　　　　　　　　　　　
相容性 TC1　TC1.5　TC2　MSC3　MSC4　MSC5/QC　ANSI　UNIX V　　　　　　　　　　　
用途:qsort 在陣列中排序 , 陣列有固定的成員 (有固定長度)。　　　　　　　　　　
語法:char *qsort(const void*key,const void *base,size_t *num,size_t width 　　
　　　int (*compare)(const *elem1,const void *elem2); 　　　　　　　　　　　　
呼叫法:int compare(const void*,const void*);　　　　　　　　　　　　　　　　
　　　　qsort((void*)envp,(size_t)count,(size_t)sizeof(char*),compare);　　
含括檔:#include<stdlib.h>　　　　　　　　　　　　　　　　　　　　　　　　　　　
說明:qsort 常式在一陣列中排序。此陣列的第 1 個位址是 base,有 num 個　　　　　
成員, 每個成員有 width 個位元組。排序時需要作比較。　　　　　　　　　　　　　
     compare 參數提供作比較常式的位址。這個比較常式取得 elem1,elem2 這兩個　
參數 (它們是指向陣列成員的指標)。在作過比較後, 傳回下表中的一個值。　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
表 319-1　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
排序是照字母順序,若改變傳回值, 也可使順序相反。　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
相關常式:find,lsearch,bsearch　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
範例:參看 Turbo C 程式設計寶典下篇第 177 頁。　　　　　　　　　　　　　　　　　
clock　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
相容性 　　　　　　TC2　　　　　　　MSC5/QC　ANSI　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
用途:clock 常式可取得目前程式用掉的滴答數目。　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
語法:clock_t clock(void); 　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
呼叫法:tick_now=clock(); 　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
含括檔:#include<time.h> 　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
說明:clock 常式傳回用掉的時間。此一時間以滴答為單位, 還要除以 CLK_TCK　　　　　
(18.2), 以取得用掉的秒數。　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
回報值:如能取得時間, 則傳回滴答數目 (型別為 clock_t), 不然傳回 -1(型別也　　　
是 clock_t)。　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
相關常式:difftime,time 　　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
範例:參看 Turbo C 程式設計寶典下篇第 189 頁。　　　　　　　　　　　　　　　　　
ctime　　　　　　　　　　　　　　　　　　　　　　　　　　　　
相容性 TC1　TC1.5　TC2　MSC3　MSC4　MSC5/QC　ANSI　UNIX V　　　　　　　　　　　
用途:ctime 把一個時間 (型別為 time_t)轉換為字元字串。　　　　　　　　　　　　
語法:char *ctime(const time_t *time); 　　　　　　　　　　　　　　　　　　　　
呼叫法:printf("Current time=%s\n",ctime(&bintime));　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
含括檔:#include<time.h>　　　　　　　　　　　　　　　　　　　　　　　　　　　　
說明:ctime 常式把保存在結構 (型別為 tm, 位址為 time)的時間轉換成字元字串。　　
此一時間是由 time 常式傳回的 (GMT 時間)。　　　　　　　　　　　　　　　　　　
  ctime 準備的字串有 26 個字元長 (\0 也算在內), 其格式如下:　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
Thu Nov 26 17:02:39 1987\n\0 　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
此一時間用 24 小時為單位。　　　　　　　　　　　　　　　　　　　　　　　　　　
回報值:ctime 傳回一個指標(指到保存資料的地方)。　　　　　　　　　　　　　　　
補充說明:為印出時間, asctime 和 ctime 都只用一個 static 字串, 它們會被新的　　
值蓋掉。　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
相關常式:asctime,time  　　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
範例:參看 Turbo C 程式設計寶典下篇第 190 頁。　　　　　　　　　　　　　　　　　
difftime　　　　　　　　　　　　　　　　　　　　　　　　　　　
相容性 TC1　TC1.5　TC2　MSC3　MSC4　MSC5/QC　ANSI　UNIX V　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
用途:difftime 常式取得兩個時間的差 (型別為 time_t)。　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
語法:double difftime(time_t time2,time_t time1);　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
呼叫法:second_used=difftime(oldtime,newtime); 　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
含括檔:#include<time.h>　　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
說明:difftime 算出 time1,time2 的差。這些時間是由 time 常式傳回的 (用 GMT　　
時間)。difftime 可算出任何兩事件的時間差。clock 常式可算出程式目前的執行時間。
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
回報值:difftime 傳回 time1-time2 的值 (兩倍精度)。　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
相關常式:time　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
範例:參看 Turbo C 程式設計寶典下篇第 192 頁。　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
ftime　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
相容性 　　　　　　TC2　MSC3　MSC4　MSC5/QC　　　　UNIX V　　　　　　　　　　　
用途:ftime 取得目前的時間並保存在一個結構內 (型別為 timeb)。　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
語法:void ftime(struct timeb *timeptr); 　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
呼叫法:ftime(&time_buffer);　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
含括檔:#include<time.h>　　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
說明:ftime 常式取得目前的時間, 保存在一個結構內(型別為 timeb, 位址由　　　　　
timeptr 指定)。ftime 把此結構的各欄設定為適當值。timeb 結構在 sys\timeb.h　　
中定義如下:　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
struct timeb{ 　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
long time;short millitim;short timezone;short dstflag;} 　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
    在設定 timeb 中的 timezone,dstflag 欄時, ftime 使用了公共變數 timezone,　
daylight 的設定。這些設定是 tzset 常式設定的 (使用了 TZ 變數)。　　　　　　　
相關常式:time,tzset　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
範例:參看 Turbo C 程式設計寶典下篇第 193 頁。　　　　　　　　　　　　　　　　　
gmtime　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
相容性 TC1　TC1.5　TC2　MSC3　MSC4　MSC5/QC　ANSI　UNIX V　　　　　　　　　　
用途:gmtime 把一個時間 (型別為 time_t)分割成結構 (型別為 tm)的各欄,而　　　　
成為 GMT 時間。　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
語法:struct tm *gmtime(const time_t *time); 　　　　　　　　　　　　　　　　　
呼叫法:t_gmt=gmtime(&bintime); 　　　　　　　　　　　　　　　　　　　　　　　　
含括檔:#include<time.h>　　　　　　　　　　　　　　　　　　　　　　　　　　　　
說明:gmtime 把一個時間分割成 GMT 時間, 保存在結構內(型別為 tm, 位址為 time)。　
此一時間是 GMT 起點 (1970.1.1.00:00:00)到某一時間 (由 time 常式傳回)的時間差。
tm 結構在 time.h　中定義如下:　struct tm{int tm_sec,int tm_min;int tm_hour;
int tm_mday;int tm_mon;int tm_year;int tm_wday,int tm_yday;int tm_isdst;};
gmtime 的分割由環境變數 TZ 決定。TZ 指出當地的時區和日光節約時間。TZ 一定　　
用 3 個字母開始 (PST,EST 等), 後面接本地時間和 GMT 時間的差值。也可再加上　　
日光節約時間。gmtime 使用這些資料來把本地時間轉換成 GMT 時間。若沒有設定　　　
TZ, 則使用 PST8PDT 。TZ 並非 ANSI 標準, 而是 Turbo C 加上的。　　　　　　　　
回報值:gmtime 傳回一個指標 (指向保存轉換過時間的結構)。　　　　　　　　　　　
補充說明:DOS 無法接受 1980 以前的時間, 因此 gmtime,localtime 傳回的時間　　　
不能早於 1980。gmtime 只使用一個 tm 結構, 因此新時間會蓋掉舊時間。　　　　　　
相關常式:asctime,localtime,time　　　　　　　　　　　　　　　　　　　　　　　　
範例:參看 Turbo C 程式設計寶典下篇第 195 頁。　　　　　　　　　　　　　　　　
localtime　　　　　　　　　　　　　　　　　　　　　　　　　　　　
相容性 TC1　TC1.5　TC2　MSC3　MSC4　MSC5/QC　ANSI　UNIX V　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
用途:localtime 一個時間 (型別為 time_t)分割成結構 (型別為 tm)的各欄位。　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
語法:struct tm*localtime(const time_t *time); 　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
呼叫法:t_local=localtime(&bintime);　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
含括檔:#include<time.h> 　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
說明:localtime 把一個時間分割為年, 月,日等保存在結構內(型別為 tm)。　　　　　
time)。此一時間是 GMT 起點 (1970.1.1.00:00:00)到某一時間 (由 time 常式傳　　　
回)的時間差。tm 結構在 time.h　中定義參看 gmtime 的說明。　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
回報值:localtime 傳回一個指標 (指向保存轉換過時間的結構)。　　　　　　　　　　
補充說明:DOS 無法接受 1980 以前的時間, 因此 gmtime,localtime 傳回的時間　　　
不能早於 1980。gmtime 只使用一個 tm 結構, 因此新時間會蓋掉舊時間。　　　　　　
相關常式:asctime,gmtime,time 　　　　　　　　　　　　　　　　　　　　　　　　　
範例:參看 Turbo C 程式設計寶典下篇第 197 頁。　　　　　　　　　　　　　　　　　
stime　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
相容性 TC1　TC1.5　TC2　　　　　　　　　　　　　　　　　　　 　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
用途:stime 常式設定系統時間和日期　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
語法:int stime(time_t *tp); 　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
呼叫法:stime(&new_time); 　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
含括檔:#include<time.h> 　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
說明:stime 常式設定系統時間和日期給一個值 (在位址為 tp 的地方)。新的時間　　　
必需是 UNIX 格式 (GMT 時間)。　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
回報值:stime 都是傳回 0。如果設定時間無效, 則原來時間不變。　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
補充說明:如果時間是 DOS 時間, 可用 dostounix 常式把它轉換成 UNIX 時間。　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
相關常式:dostounix 　　　　　　　　　　　　　　　　　　　　　　　　　　　　
範例:參看 Turbo C 程式設計寶典下篇第 198 頁。　　　　　　　　　　　　　　　　　
time　　　　　　　　　　　　　　　　　　　　　　　　　　
相容性 TC1　TC1.5　TC2　MSC3　MSC4　MSC5/QC　ANSI　UNIX V　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
用途:time 常式可取得從 GMT 原點到現在所經過的秒數。　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
語法:time_t time(time_t *timeptr);　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
呼叫法:time(&bintime);　　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
含括檔:#include<time.h> 　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
說明:time 常式取得目前時間, 並照公共變數 _timezone 的值來調整。然後算出　　　
從 GMT 原點 (1970.1.1.00:00:00)到目前時間的總秒數。算出的結果保存在變數　　　
(型別為 time_t,位址為 timeptr)內。如果 timeptr 為 NULL, 則不保存結果。　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
回報值:time 常式傳回總秒數。　　　　　　　　　　　　　　　　　　　　　　　　　
補充說明:time 傳回的值可用 ctime 轉換成字串, 或用 gmtime,localtime 分割　　　
時間和日期欄位。　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
相關常式:ctime,gmtime,tzset　　　　　　　　　　　　　　　　　　　　　　　　　　
範例:參看 Turbo C 程式設計寶典下篇第 199 頁。　　　　　　　　　　　　　　　　　
tzset　　　　　　　　　　　　　　　　　　　　　　　　　　
相容性 TC1　TC1.5　TC2　MSC3　MSC4　MSC5/QC　　　　UNIX V　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
用途:tzset 常式指定公共變數 timezone,daylight,tzname 的值 (資料由 TZ 提供)。　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
語法:void tzset(void); 　　　　　　　　　　　　　　　　　　　　　　　　　　　
含括檔:#include<time.h>　　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
說明:tzset 常式使用 TZ 的資料, 把適當的值設定給表 12.3 的公共變數。TZ 提供　　
時區和日光節約時間的資料, 在從 GMT 時間轉換成本地時間時, 要用這些資料。TZ　　
一定用 3 個字母開始 (PST,EST 等), 後面接 GMT 和本地時間的時差。還可接日光節約
時區。tzset  用這些資料來設定並保存公 共變數的值。如果不設定 TZ, 則用預定值　
(PST8PPDT)。TZ, tzset 都不是 ANSI 標準, 是 Turbo C 增加的。　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
表 12.3 339　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
補充說明:gmtime 常式使用 tzset 設定的公共變數。　　　　　　　　　　　　　　　
相關常式:localtime,time　　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
範例:參看 Turbo C 程式設計寶典下篇第 201 頁。　　　　　　　　　　　　　　　　　
access　　　　　　　　　　　　　　　　　　　　　　　　　　　　
相容性 TC1　TC1.5　TC2　MSC3　MSC4　MSC5/QC　　　　UNIX V　　　　　　　　　　　
用途 access 常式用來檢查檔案是否存在, 若存在, 則檢查其讀/寫許可。　　　　　　
語法 int access(const char *path,int mode); 　　　　　　　　　　　　　　　　　
呼叫法 if(access("temp.dat",4)==0) puts("data file exists"); 　　　　　　　　　
含括檔 #include<io.h>　　　　　　　　　　　　　　　　　　　　　　　　　　　　
說明　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
    access 常式用來檢查 path 參數指定的檔案是否存在, 若存在, 則檢查 mode　　
參數指定的操作是否已許可。mode 參數是下表中的一個值。如果 path 參數指定　　　
的是一個目錄, 則 access 常式只檢查此目錄是否存在。在 DOS 下, 所有的目錄　　　
都可讀寫, 而所有的檔案都可讀。　　　　　　　　　　　　　　　　　　　　　　　
表 p200　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
回報值    如果 access 常式查出 path 指定的檔案或目錄存在, 而 mode 指定的操作　
　　　　　也被許可, 則傳回 0。如果不存在,或無法作指定操作, 則傳回 -1。並把　
　　　　　errno 設定為 ENOENT (指出 path 無效)或設定為 EACCES (指出操作不被許
　　　　　可)。　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
相關常式  chmod,fstat　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
範例　參看 Turbo C 程式設計寶典上篇第 200 頁。　　　　　　　　　　　　　　　　
chmod　　　　　　　　　　　　　　　　　　　　　　　　　　　　
相容性 TC1　TC1.5　TC2　MSC3　MSC4　MSC5/QC　　　　UNIX V　　　　　　　　　　　
用途 chmod 常式可用來改變檔案的讀寫許可設定　　　　　　　　　　　　　　　　　
語法  int chmod(const char *path,int pmode); 　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
呼叫法 chmod("inventory.lis",S_IWRITE);　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
含括檔 #include<io.h>,#include<sys\types.h> 　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
說明  chmod 常式把一個檔案的讀寫許可 (由 path 參數提供)轉變成新的設定　　　　　
(由 pmode 參數提供)。這些設定都用 sys\stat.h 中的常數定義。下面的表格　　　　　
說明各種設定的可能組合及其意義。在 DOS 下, 所有的檔案都是可讀的, 因此　　　　　
不可能有只寫的檔案存在。　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
表 p202 　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
回報值  如果成功的改變了許可, 則傳回 0, 若失敗, 則傳回 -1, 把公共變數　　　　　
errno 設定為 ENOENT , 表示指定的徑名無效。　　　　　　　　　　　　　　　　　
相關常式 access,fstat,stat 　　　　　　　　　　　　　　　　　　　　　　　　　　
範例  參看 Turbo C 程式設計寶典上篇第 202 頁。　　　　　　　　　　　　　　　　
chsize　　　　　　　　　　　　　　　　　　　　　　　　　　　　
相容性 TC1　TC1.5　TC2　MSC3　MSC4　MSC5/QC　　　　UNIX V　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
用途  chsize 常式用來改變檔案的長度 (用無緩衝, 無格式化寫入模式開啟的檔案)。　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
語法 int chsize(int handle,long size);　　　　　　　　　　　　　　　　　　　　
呼叫法 chsize(filehandle,0L);　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
含括檔 #include<io.h> 　　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
說明 chsize 常式會增加或減少一個檔案 (由 handle 指定的)的長度, 以配合新的　　
長度 (由 size 指定)。若檔案增長, 則把 null 字元加到檔案後面。減短檔案時,　　
size 長度以外的資料都會被去掉。　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
回報值  成功時,chsize 常式傳回 0。有問題時, 把 errno 設定為下列常數中的一個:　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
表格 參看上篇第 204 頁　　　　　　　　　　　　　　　　　　　　　　　　　　　　
相關常式  access,chmod,fstat 　　　　　　　　　　　　　　　　　　　　　　　　　
範例  參看 Turbo C 程式設計寶典上篇第 204 頁。　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
filelength　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
相容性 TC1　TC1.5　TC2　　　　MSC4　MSC5/QC　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
用途  filelength 常式可找出檔案的長度 (以位元組為單位)。這個常式需要用到　　　
檔案的識別碼。　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
語法 long filelength(int file_handle);　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
呼叫法 filesize=filelength(filehandle); 　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
含括檔 #include<stdio.h> 　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
說明  filelength 常式傳回一個檔案的長度 (以位元組為單位, 此檔案由參數　　　　　
file_handle 指定)。先使用 fileno 常式取得檔案的識別碼, 再用 filelength　　　　
算出檔案的長度。　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
相關常式  fileno 　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
範例  參看 Turbo C 程式設計寶典上篇第 206 頁。　　　　　　　　　　　　　　　　
fnmerge　　　　　　　　　　　　　　　　　　　　　　　　　　　　
相容性 TC1　TC1.5　TC2　　　　　　　　　　　　　　　　　　　 　　　　　　　　　
用途  fnmerge 常式用來建立完整的徑名 (由磁碟機編號, 目錄路徑, 檔名, 檔案附名　
組成)。　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
語法 void fnmerge(char *path,const char *drive,const char *dir,const char  　　
　　　*fname,const char *ext);　　　　　　　　　　　　　　　　　　　　　　　　
呼叫法 fnmerge(pathname,"c","\\temp\\","result",".dat"); 　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
含括檔 #include<dir.h> 　　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
說明  fnmerge 常式把 drive,dir,fname,ext 組成完整的徑名, 然後存放在緩衝區　　
path 內。緩衝區要分配足夠的長度, 但單一的字串可為任一長度。MAXPATH (在 dir.h　
中定義) 定義 DOS 能接受的最大長度, 因此把 path 指定為 MAXPATH 是最安全的。這　
可使最後產生的徑名不會超過限度, 參數的意義如下表:　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
表 參看上篇第 207 頁　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
相關常式 fnsplit 　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
範例  參看 Turbo C 程式設計寶典上篇第 207 頁。　　　　　　　　　　　　　　　　
fnsplit　　　　　　　　　　　　　　　　　　　　　　　　　　　
相容性 TC1　TC1.5　TC2　　　　　　　　　　　　　　　　　　 　　　　　　　　　　
用途  fnsplit 常式可把一個完整的徑名分割為磁碟機編號, 目錄路徑, 檔名及　　　　
檔案附名。　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
語法  void _fnsplit(const char *path,char *drive,char *dir,char *fname,　　　　
　　　　　　　　　　char *ext); 　　　　　　　　　　　　　　　　　　　　　　　
呼叫法 fnsplit(pathname,drive,dir,filename,extension);　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
含括檔  #include<dir.h>　　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
說明  fnsplit 常式把完整徑名 (由參數 path 提供的)分割成幾個部份, 用參數　　　　
drive,dir,fname,ext 傳回。必需要保留足夠的長度來放這些字串。常數 MAXDRIVE　　　
,MAXDIR,MAXFILE,MAXEXT (在 dir.h 中定義)分別指定這些字串的最大長度, 在宣告　　
時應使用到這些常數。　　　　　　　　　　　　　　　　　　　　　　　　　　　　
    在 fnsplit 的傳回值中, drive 中是磁碟機編號 (後面接 :), dir 內是目錄徑　
名 (有 \ 或 / 作分隔),fname 中放的是檔名, 而附名放在 ext 內 (前面有一個 . 號)
。如果少了一個, 則相關字串會成為 \0。　　　　　　　　　　　　　　　　　　　　
相關常式 fnmerge 　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
範例  參看 Turbo C 程式設計寶典上篇第 209 頁。　　　　　　　　　　　　　　　　
fstat　　　　　　　　　　　　　　　　　　　　　　　　　
相容性  TC1　TC1.5　TC2　MSC3　MSC4　MSC5/QC　　　　UNIX V　　　　　　　　　　
用途  fstat 常式用來取得一個檔案 (以無緩衝, 無格式化 I/O 開啟)的訊息。　　　　
語法 int fstat(int handle,struct stat *buffer); 　　　　　　　　　　　　　　　
呼叫法 fstat(filehandle,&stat_buffer);　　　　 　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
含括檔 #include<sys\types.h>　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
說明  fstat 常式傳回檔案 (由參數 handle 指定)的訊息。必需要先安排一個結構　　　
(型別為 stat), 並提供指到此結構的指標 (由參數 buffer 提供), fstat 常式若　　　
操作成功, 則傳回訊息存放此一結構內。stat 結構在 sys\stat.h 中定義, 下面是　　　
此結構的一個宣告。其中有幾個欄位是給 UNIX 而非 DOS 使用的。　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
參看上篇第 210 頁 　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
回報值 如果成功, 傳回 0, 失敗, 則傳回 -1, 並把 errno 設定為 EBADF (表示　　　
handle 無效)。　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
相關常式  access,chmod 　　　　　　　　　　　　　　　　　　　　　　　　　　　　
範例  參看 Turbo C 程式設計寶典上篇第 210 頁。　　　　　　　　　　　　　　　　
isatty　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
相容性 TC1　TC1.5　TC2　MSC3　MSC4　MSC5/QC　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
用途 isatty 常式用來檢查裝置(由識別碼指定)是否為字元裝置 (在 DOS 中,　　　　　
控制台, 印表機, 串列埠都是字元裝置)。　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
語法 int isatty(int handle);　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
呼叫法 if(isatty(fileno(stdout))!=0)puts("stdout is console);　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
含括檔 #include<io.h>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
說明  isatty 常式用識別碼檢查裝置是否為字元裝置。　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
基本用法  isatty 常式可決定 I/O 轉向是否有效 (若 I/O 轉到檔案, 則傳回 0 )。　
知道這點, 可改變處理的方法。例如一個程式 XYZ 在下一命令 (XYZ>OUTFILE )下　　　
執行 (這表示把 XYZ 的輸出轉到檔案 OUTFILE 上), 這時就不要呼叫畫圖常式, 因為　
輸出不送到螢幕上。　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
回報值  如果是字元裝置, 傳回非 0 值, 不然傳回 0。　　　　　　　　　　　　　　　
範例  參看 Turbo C 程式設計寶典上篇第 213 頁　　　　　　　　　　　　　　　　　
lock　　　　　　　　　　　　　　　　　　　　　　　　　　　
相容性  TC1　TC1.5　TC2　MSC3　MSC4　　　　　　　　　　　　　 　　　　　　　　
用途  lock 常式 (在 DOS 3.0 及以上版本)可用來鎖住檔案中一部份的位元組, 在　　
共用檔案時, 這是有用處的。　　　　　　　　　　　　　　　　　　　　　　　　　　
語法 int lock(int handle,long offset,long nbytes);　　　　　　　　　　　　　　
呼叫法 lock(handle,0L,256);　　　　　　　　　　　　　　　　　　　　　　　　　　
含括檔 #include<io.h>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
說明  若使用 DOS 的 SHARE 命令 (作檔案共用), 就有使用 lock 常式的需要。　　　　
因為 DOS 3.0 以前的版本沒有 SHARE 這個命令, 因此 lock 只能用在 3.0 以後。　　　
    呼叫 lock 後, 它會鎖住檔案 (由 handle 指定)的某一部份 (從 offset 開　　　
始的 nbytes 個位元組)。　　　　　　　　　　　　　　　　　　　　　　　　　　　
    鎖住後, 這一部份就不會被其他程式存取。取消鎖住 (unlock), 則無此限制。　　
但必需分別取消 (即使此兩部份相連也是一樣)。檔案中各部份可同時鎖住, 但不　　　
能重疊。而在關檔, 或結束程式前, 一定要取消鎖住狀態。在 3.0 及 3.1 版中,　　　
執行子程式時, 會把鎖住部份取消。　　　　　　　　　　　　　　　　　　　　　　
回報值  執行成功時, 傳回 0, 否則傳回 -1。　　　　　　　　　　　　　　　　　　
補充說明  DOS 3.0 版以下, 無法執行 lock 常式。　　　　　　　　　　　　　　　　
相關常式 sopen,unlock　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
範例  參看 Turbo C 程式設計寶典上篇第 214 頁　　　　　　　　　　　　　　　　　
mktemp　　　　　　　　　　　　　　　　　　　　　　　　　　
相容性  TC1　TC1.5　TC2　MSC3　MSC4　MSC5/QC　　　　UNIX V　　　　　　　　　　
用途  mktemp 常式修改指定的檔名格式, 產生一個唯一的檔名。　　　　　　　　　　
語法 char *mktemp(char *template); 　　　　　　　　　　　　　　　　　　　　　
呼叫法 char tfilename="tcbXXXXX";　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
含括檔 #include<dir.h> 　　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
說明  mktemp 常式修改字串 template 的一部份, 來產生一個唯一的檔名。template　
的格式如下:baseXXXXXX。base (一或多個字元)出現在每一個檔名內。而 XXXXXX 則　　
為兩個字元加句號和 3 個字元的附名。mktemp 常式從 AA.AAA 開始, 然後是 AB.AAA　　
,AC.AAA 等等。在傳回檔名前, mktemp 會檢查目前目錄中是否有相同的檔名。mktemp　　
並不建檔, 它只建立檔名而已。　　　　　　　　　　　　　　　　　　　　　　　　　
基本用法  若程式建立許多暫時性的檔案, 則 mktemp 常式可分別指定唯一的檔名。　　
回報值  mktemp 常式傳回指向格式檔名的指標。若有問題 (無法從格式中再指定　　　
唯一的檔名), 則傳回 NULL。　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
相關常式 tpnam,tmpfile 　　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
範例  參看 Turbo C 程式設計寶典上篇第 216 頁　　　　　　　　　　　　　　　　　
remove　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
相容性 TC1　TC1.5　TC2　MSC3　MSC4　MSC5/QC　ANSI　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
用途  remove 常式可刪掉一個檔案 (由 pathname 參數指定的)。　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
語法 int remove(const char *path);　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
呼叫法 remove("c:\\tmp\\tmp01234); 　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
含括檔  #include<stdio.h>　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
說明  remove 常式會刪掉 path 參數指定的檔案　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
傳回值  如果成功刪掉, 則傳回 0, 不然傳回 -1, 並把 errno 設定為 ENOENT　　　　　
(沒有找到時)或設定為 EACCES (pathnames 為目錄或唯讀檔案時)。　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
相關常式  unlink 　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
範例  參看 Turbo C 程式設計寶典上篇第 217 頁　　　　　　　　　　　　　　　　　
rename　　　　　　　　　　　　　　　　　　　　　　　　　　　　
相容性 TC1　TC1.5　TC2　MSC3　MSC4　MSC5/QC　ANSI　　　　　　　　　　　　　　　
用途  rename 常式可改變檔案或目錄的名稱 (由 pathname 指定的)。例如可用　　　　
rename 來設計一個程式, 具有 UNIX mv 命令的功能 (把一個檔案從一個目錄移到　　　
另一個目錄)。　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
語法 int rename(const char *oldname,const char *newname); 　　　　　　　　　　
呼叫法 rename("c:\\tmptest.exe","c:bin\\grview.exe"); 　　　　　　　　　　　　
含括檔 #include<stdio.h> 　　　　　　　　　　　　　　　　　　　　　　　　　　　
說明   rename 常式把一個檔案或目錄的名稱從 oldname 改為 newname。它可把　　　
一個檔案從一個目錄移到另一個目錄 (但都在同一磁碟機)。目錄不能移動, 也不能　　
用萬用字元。　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
回報值  rename 常式成功時, 傳回 0, 失敗時, 傳回 -1, 進一步的資料存放在　　　　
errno 變數內。如果 newname 這個名稱的檔案和目錄已存在, 或 newname 的檔案　　　
無法建立, 或 oldname 是舊目錄, 而 newname 表示另一個目錄的路徑, 則 errno　　　
都等於 EACCES。若指定其他的磁碟機則設定為  ENOTSAN, 如果 pathname 並沒有　　　
參照到已有的目錄或檔案, 則設定為 ENOENT 　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
相關常式  creat,fopen,open 　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
範例 參看 Turbo C 程式設計寶典上篇第 218 頁。　　　　　　　　　　　　　　　　　
setmode　　　　　　　　　　　　　　　　　　　　　　　　
相容性  TC1　TC1.5　TC2　MSC3　MSC4　MSC5/QC　　　　　　　　　　　　　　　　　
用途 setmode 常式可設定檔案的轉換模式 (作無緩衝, 無格式化 I/O 用的檔案)。　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
語法 int setmode(int handle,int mode);　　　　　　　　　　　　　　　　　　　　
呼叫法 setmode(filehandle,O_BINARY);　　　　　　　　　　　　　　　　　　　　　
含括檔 #include<io.h>,#include<fcntl.h> 　　　　　　　　　　　　　　　　　　　
說明  setmode 常式把檔案 (由參數 handle 指定)的轉換模式改成 mode 參數指定　　
的模式。轉換模式決定 I/O 時, 進列/歸零字元的轉換方法。參數 mode 的指若為　　　
O_TEXT 表示為文字模式(有轉換), 若為 O_BINARY 表示為 2 位元模式 (無轉換)。　　
此 2 常數在 fcntl.h 中定義。　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
基本用法  通常 setmode 常式用來改變 stdin,stdout,stderr,stdaux,stdprn 的　　
預設模式。其他檔案的轉換模式則在用 open,fopen 開啟時指定。　　　　　　　　　　
回報值  若沒有錯誤, setmode 常式傳回 0, 有問題傳回 -1, 並把 errno 設定為　　　
EBADF (識別碼無效時)或設定為 EINVAL (參數 mode 的值不是 O_TEXT 或 O_BINARY　　
中的一個時)。　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
相關常式 fopen,open　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
範例  參看 Turbo C 程式設計寶典上篇第 220 頁。　　　　　　　　　　　　　　　　
stat　　　　　　　　　　　　　　　　　　　　　　　　　　　
相容性  TC1　TC1.5　TC2　MSC3　MSC4　MSC5/QC　　　　UNIX V　　　　　　　　　　
用途  stat 常式用來取得一個檔案(由 path 指定的)的訊息。　　　　　　　　　　　　
語法 int stat(char *path,struct stat *buffer);　　　　　　　　　　　　　　　　
呼叫法 stat("result.dat",&stat_buffer);　　　　　　　　　　　　　　　　　　　　
含括檔 #include<sys\types.h>,#include<sys\stat.h>　　　　　　　　　　　　　　　
說明   stat 常式會傳回一檔案或目錄 (由 path 參數指定的)的特定訊息。傳回的　　
訊息放在一個結構內 (型別為 stat)。指向此結構的指標一定要由 buffer 參數提供。　
結構在 sys\stat.h 中定義, 宣告如下:　　　　　　　　　　　　　　　　　　　　　
參看上篇第 221 頁 　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
    如果是一個目錄, 則 st_mode 欄位中和 S_IFDIR 有關的位元被設定, 若為檔案　　
, 則和 S_IFREG 有關的位元被設定。此欄位中的其他位元表示讀/寫許可, 及 path　　
是否為裝置等。若為裝置, 時間和長度欄位無意義。　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
回報值  若成功取得訊息, 則 stat 傳回 0, 若失敗, 則傳回 -1, 並把 errno 設定為　
ENOENT (表示指定路徑中沒有檔案, 目錄, 或裝置)。　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
相關常式  access,chmod,fsata 　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
範例  參看 Turbo C 程式設計寶典上篇第 221 頁。　　　　　　　　　　　　　　　　
umask　　　　　　　　　　　　　　　　　　　　　　　　　　　
相容性 TC1　TC1.5　TC2　MSC3　MSC4　MSC5/QC　　　　UNIX V　　　　　　　　　　　
用途  umask 常式用來設定讀/寫許可遮蓋, 這樣, 由此程序建立的檔案, 其讀/寫許可　
都會受到它的影響。　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
語法 unsigned umask(unsigned pmode);　　　　　　　　　　　　　　　　　　　　　
呼叫法 oldmask=umask(S_IWRITE);　　　　　　　　　　　　　　　　　　　　　　　　
含括檔 #include<io.h>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
說明 umask 常式接受讀/寫許可設定遮蓋 (由 pmode 參數指定)。這個遮蓋會修改　　
新檔案 (由 creat,open,sopen 建立的)的讀寫許可。　　　　　　　　　　　　　　　
    pmode 遮蓋意義如下表。如果某一位元被設定為 1, 則檔案許可設定中的相關　　　
位元被設定為 0 (表示此操作不許可)。另一方面, pmode 中的某一位元若為 0, 表　　
示許可設定中的相關位元不變。　　　　　　　　　　　　　　　　　　　　　　　　　
    pmode 參數的值如表 7.5。這些常數都在 sys\stat.h 中定義。　　　　　　　　
    由於 DOS 的檔案都是可讀的, 此表中只有 S_IWRITE 有用。　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
參看上篇第 224 頁　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
回報值  umask 常式傳回許可遮蓋中的前一個值　　　　　　　　　　　　　　　　　
相關常式 creat,open　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
範例 參看 Turbo C 程式設計寶典上篇第 224 頁。　　　　　　　　　　　　　　　　　
unlink　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
相容性  TC1　TC1.5　TC2　MSC3　MSC4　MSC5/QC　　　　UNIX V　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
用途 unlink 常式可刪掉一個檔案 (由 pathname 參數指定)。　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
語法 int unlink(const char *path);　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
呼叫法 unlink("old.dat");　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
含括檔 #include<stdio.h> 　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
說明  unlink 常式刪掉一個檔案 (由 path 參數指定的)。這種功能在 UNIX 系統　　
更為有用, 因 UNIX 中的檔案可連接到幾個目錄。　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
回報值  若成功則傳回 0, 若失敗, 則傳回 -1, 並把 errno 設定為　　　　　　　　
ENOENT (表示指定路徑中沒有檔案),若檔案為只讀, 或找到的是目錄, 則設定為　　　　
EACCES。　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
相關常式 remove　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
範例 參看 Turbo C 程式設計寶典上篇第 225 頁。　　　　　　　　　　　　　　　　　
unlock　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
相容性 TC1　TC1.5　TC2　　　　　　　　　　　　　　　　　　 　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
用途  unlock 常式 (DOS 3.0 及以上版本)可取消檔案中的鎖住部份。在檔案共用時,　
這是很有用的功能。　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
語法 int unlock(int handle,long offset,long nbytes);　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
呼叫法 unlock(handle,0L,256);　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
含括檔 #include<io.h>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
說明  unlock 常式用來取消原來的鎖住狀態。unlock/lock 常式在 DOS 命令　　　　　
SHARE 中很有用。　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
    取消的部份由 offset 和 nbytes 參數指定。在關檔前, 每一個鎖住部份都　　　
要取消鎖住狀態。　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
回報值 成功時, 傳回 0, 失敗時, 傳回 -1。　　　　　　　　　　　　　　　　　　
相關常式  lock,sopen 　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
範例  參看 Turbo C 程式設計寶典上篇第 227 頁。　　　　　　　　　　　　　　　　
****************************************************

