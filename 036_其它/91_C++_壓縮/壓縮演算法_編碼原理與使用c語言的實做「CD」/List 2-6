#include<stdio.h>
#define TRUE 1

#define N 256
#define NODATA 2100000000

/* 霍夫曼樹用的陣列 */
int l_node[2*N],r_node[2*N];
int parent[2*N];

typedef unsigned char byte;

/* 從檔案讀入數個位元組的資料 */
int readData(unsigned char *data,int len,FILE *fp)
{
    return fread(data,len,sizeof(char),fp);
}

/* 從檔案讀入4個位元組的數值資料 */
int getLong(FILE *fp)
{
    unsigned char buf[16];

    readData(buf,4,fp);
    return (buf[0]<<24) |(buf[1]<<16) | (buf[2]<<8) | buf[3];
}

/* ------------------------------------------------------- */

static int bits=0;
static int bdata=0;

/* 位元輸入處理的初始化 */
int fgetBitInit()
{
    bits=0;
    bdata=0;
    return 0;
}

/* 輸入1位元 */
int fgetBit(FILE *fp)
{
    unsigned char bbuf;
    int val;

    if(bits==0) {
        readData(&bbuf,1,fp);
        bdata=bbuf;
    }
    val=(bdata>>7)&1;
    bdata=(bdata<<1) & 0xff;
    bits++;
    if(bits>=8) {
        bits=0;
        bdata=0;
    }
    return val;
}

/* 從檔案取得登場頻率表 */
int inputHist(int *hist,int nn,FILE *fp)
{
    int i;

    for(i=0;i<nn;i++)
        hist[i]=getValueWyle(fp);
    return TRUE;
}

/* 求出頻率最小的兩個 */
int getMin2(int *hist,int hm,int *d1,int *d2)
{
    int i;
    int min;

    min=NODATA-1;
    *d1= *d2= -100;
    for(i=0;i<hm;i++) {
        if(hist[i]<min) {
            *d1=i;
            min=hist[i];
        }
    }
    min=NODATA-1;
    for(i=0;i<hm;i++) {
        if(i!=(*d1) && hist[i]<min) {
            *d2=i;
            min=hist[i];
        }
    }
    return 0;
}

/* 製作霍夫曼樹 */
int makeTree(int *hist,int n)
{
    int hm_data;
    int d1,d2,i;

    hm_data=n;

    /* 初始化 */
    for(i=0;i<2+N;i++) {
        l_node[i]=r_node[i]=parent[i]=0;
    }

    while(1) {
        /* 求出頻率最小的兩者 */
        getMin2(hist,hm_data,&d1,&d2);
        /* 若沒有最小值，則結束 */
        if(d1<0 || d2<0) break;
        l_node[hm_data]=d1;
        r_node[hm_data]=d2;
        parent[d1]=hm_data;
        parent[d2]= -hm_data;
        hist[hm_data]=hist[d1]+hist[d2];
        hist[d1]=NODATA;
        hist[d2]=NODATA;
        hm_data++;
    }
    return hm_data;
}

/* 將威爾編碼讀入1個 */
int getValueWyle(FILE *fp)
{
    int bit;
    int i,cnt;
    int val;

    cnt=0;
    while(fgetBit(fp)==1) {
        cnt++;
    }
    cnt+=2;
    val=0;
    for(i=0;i<cnt;i++) {
        bit=fgetBit(fp)<<i;
        val|=bit;
    }
    return val;
}

/* 將霍夫曼編碼讀入1個 */
int getValue(int datas,FILE *fp)
{
    int rt,bit;

    rt=datas-1;
    while(rt>=N) {
        bit=fgetBit(fp);
        if(bit==0) {
            rt=l_node[rt];
        }
        else {
            rt=r_node[rt];
        }
    }
    return rt;
}

/* main函數 */
int main(int ac,char *av[])
{
    FILE *fp;
    int hist[2*N];
    int i,size,datas;

    if ((fp = fopen(av[1],"rb"))==NULL)
        return 6;

    size=getLong(fp);
    /* 讀出登場頻率表 */
    inputHist(hist,N,fp);

    /* 製作霍夫曼樹 */
    datas=makeTree(hist,N);

    fgetBitInit();
    for(i=0;i<size;i++) {
        int rd_data;
        rd_data=getValue(datas,fp);
        printf("%c",rd_data);
    }
    fclose(fp);
    return 0;
}
