#include <windows.h>
#include <stdio.h>
#include <limits.h>
#include <math.h>

#define NNN 8
#define Nketa 3
#define PAI 3.14159265
#define M_PI PAI

struct PictureInfo {
        long left, top;
    long width;
    long height;
    WORD x_density;
    WORD y_density;
    short colorDepth;
    HLOCAL hInfo;
};

/* 存放RGB值的資料結構 */
typedef struct RGB_COL{ int r,g,b;}RGBcolor;

char mbuf[256];
int readmode;

/* 傳回有關plug-in的資訊 */
int WINAPI GetPluginInfo(int infono,LPSTR buf,int buflen)
{
    switch (infono) {
    case 0:
        strncpy(buf, "00IN", buflen);
        break;
    case 1:
        strncpy(buf, "DC2 to DIB filter ver.0.08b", buflen);
        break;
    case 2:
        strncpy(buf, "*.DC2", buflen);
        break;
    case 3:
        strncpy(buf, "DC2 decoding sample", buflen);
        break;
    default:
        return 0;
    }
    return strlen(buf);
}

/* 判斷資料是否對應plug-in */
int WINAPI IsSupported(LPSTR filename,DWORD dw)
{
    unsigned char buffer[2048];
    unsigned char *p;

    if (dw & 0xffff0000) {
        p = (unsigned char*)dw;
    } else {
        DWORD r;
        p = buffer;
        if (!ReadFile((HANDLE)dw,(void*)p,4 , &r, NULL))
            return 0;
    }
    buffer[4]='\0';
    if(strcmp(buffer,"DCT2")==0) return 1;
    return 0;
}

/* 關閉檔案 */
int MYlclose(HFILE fp)
{
    if(!readmode) _lclose(fp);
    return 0;
}

/* 設定預設值 */
int set_defaultBMI(BITMAPINFOHEADER *bmi)
{
    bmi->biSize=sizeof(BITMAPINFOHEADER);
    bmi->biPlanes=1;
    bmi->biCompression=BI_RGB;
    bmi->biSizeImage=0;
    bmi->biXPelsPerMeter=0;
    bmi->biYPelsPerMeter=0;
    bmi->biClrUsed=0;
    bmi->biClrImportant=0;
    return 0;
}

/* 從檔案讀入4位元組的數值資料 */
int getLong(HFILE fp)
{
    char buf[10];

    readData(buf,4,fp);
    return (buf[0]<<24) |(buf[1]<<16) | (buf[2]<<8) | buf[3];
}

/* 從檔案讀入2位元組的數值資料 */
int getShort(HFILE fp)
{
    char buf[10];

    readData(buf,2,fp);
    return (buf[0]<<8) | buf[1];
}

/* 讀入1位元組的數值資料 */
unsigned int getC(HFILE fp)
{
    char buf[4];

    readData(buf,1,fp);
    return (unsigned int)buf[0];
}

/* 從檔案讀入數位元組 */
int readData(char *data,int len,HFILE fp)
{
   return _lread(fp,data,len);
}

// -------------------------------------------------------

static int bits=0;
static int bdata=0;

/* 輸入處理的初始化 */
int fgetBitInit()
{
    bits=0;
    bdata=0;
    return 0;
}

/* 輸入1位元組 */
int fgetBit(HFILE fp)
{
    unsigned char bbuf;
    int val;

    if(bits==0) {
        readData(&bbuf,1,fp);
        bdata=bbuf;
    }
    val=(bdata>>7)&1;
    bdata=(bdata<<1) & 0xff;
    bits++;
    if(bits>=8) {
        bits=0;
        bdata=0;
    }
    return val;
}

/* 輸入n位元 */
int fgetNumber(int bits,HFILE fp)
{
    int i,res,sn;

    sn=fgetBit(fp);
    if(sn==0) sn=1;
    else sn=-1;
    res=0;
    for(i=0;i<bits;i++) {
        res=res*2;
        res+=fgetBit(fp);
    }
    return res*sn;
}

/* 以任意位元數來輸入(含正負) */
int fgetCompNumber(int bits,HFILE fp)
{
    int i,res,sn;

    bits--;
    sn=fgetBit(fp);
    if(sn==0) sn=1;
    else sn=-1;
    res=0;
    for(i=0;i<bits;i++) {
        res=res*2;
        res+=fgetBit(fp);
    }
    for(i=0;i<15-bits;i++) {
        res=res*2;
    }
    return res*sn;
}

/* 讀入標頭 */
int getImgInfo(int *mx,int *my,int *dep,HFILE fp)
{
    char buf[100];

    readData(buf,4,fp);
    *mx=getLong(fp);
    *my=getLong(fp);
    *dep=24;
    return 0;
}

/* 將像素值設定到24位元DIB */
int setColor(int x,int y,unsigned char *data,int mx,int my,RGBcolor *col)
{
    int adr,mmx;

    if(x>=mx) return 0;
    if(y>=my) return 0;
    mmx=(mx*3)/4*4;
    adr=x*3+(my-y-1)*mmx;
    data[adr+2]=col->r;
    data[adr+1]=col->g;
    data[adr  ]=col->b;
}

short adm[NNN][NNN][NNN][NNN];

/* 解壓縮處理主程式 */
long decode(HFILE fp,unsigned char *img,int mx,int my)
{
    int x,y;
    int lx,ly,loopx,loopy;
    double c[NNN*NNN],b[NNN*NNN],a[NNN*NNN];
    int tmp;
    RGBcolor col;
    int code_bits[8*8]=
    {
        16,14,12,10, 8, 6, 4, 4,
        14,12,10, 8, 6, 4, 4, 4,
        12,10, 8, 6, 4, 4, 4, 4,
        10, 8, 6, 4, 4, 4, 4, 4,
         8, 6, 4, 4, 4, 4, 4, 4,
         6, 4, 4, 4, 4, 4, 4, 4,
         4, 4, 4, 4, 4, 4, 4, 4,
         4, 4, 4, 4, 4, 4, 4, 4
    };

    loopx=(mx+NNN-1)/NNN;
    loopy=(my+NNN-1)/NNN;
    fgetBitInit();
    initConst();
    for(ly=0;ly<loopy;ly++) {
        for(lx=0;lx<loopx;lx++) {

            for(y=0;y<NNN;y++) {
                for(x=0;x<NNN;x++) {
                    c[x+y*NNN]=(double)fgetCompNumber(code_bits[y*8+x],fp);
                }
            }
            for(y=0;y<NNN;y++) {
                IDCT8(c+y*NNN,b+y*NNN);
            }
            tenchi(b,NNN);
            for(y=0;y<8;y++) {
                IDCT8(b+y*NNN,a+y*NNN);
            }
            for(y=0;y<NNN;y++) {
                for(x=0;x<NNN;x++) {
                    tmp=(int)(a[x+y*NNN]/16.0);
                    if(tmp<0) tmp=0;
                    if(tmp>255) tmp=255;
                    col.r=tmp;
                    col.g=tmp;
                    col.b=tmp;
                    setColor(lx*NNN+x,ly*NNN+y,img,mx,my,&col);
                }
            }
        }
    }
    return 0;
}

double c14;
double s18;
double c18;
double s38;
double c38;
double s1h;
double c1h;
double s5h;
double c5h;
double s3h;
double c3h;
double s7h;
double c7h;

/* 定義常數 */
initConst()
{
    c14=cos(M_PI/4);
    s18=sin(M_PI/8);
    c18=cos(M_PI/8);
    s38=sin(3*M_PI/8);
    c38=cos(3*M_PI/8);
    s1h=sin(M_PI/16);
    c1h=cos(M_PI/16);
    s5h=sin(5*M_PI/16);
    c5h=cos(5*M_PI/16);
    s3h=sin(3*M_PI/16);
    c3h=cos(3*M_PI/16);
    s7h=sin(7*M_PI/16);
    c7h=cos(7*M_PI/16);
    return 0;
}

/* DCT結果的復原處理 */
int IDCT8( double *in, double *out)
{
    double t0, t1, t2, t3, t4, t5, t6, t7;
    double u0, u1, u2, u3, u4, u5, u6, u7;

    t4 =  in[1]*s1h - in[7]*s7h;
    t5 =  in[5]*s5h - in[3]*s3h;
    t6 =  in[5]*c5h + in[3]*c3h;
    t7 =  in[1]*c1h + in[7]*c7h;

    u0 =  in[0]*c14 + in[4]*c14;
    u1 =  in[0]*c14 - in[4]*c14;
    u2 =  in[2]*s18 - in[6]*s38;
    u3 =  in[2]*c18 + in[6]*c38;
    u4 =  t4 + t5;
    u5 =  t4 - t5;
    u6 = -t6 + t7;
    u7 =  t6 + t7;

    t0 =  u0 + u3;
    t1 =  u1 + u2;
    t2 =  u1 - u2;
    t3 =  u0 - u3;
    t4 =  u4;
    t5 = -u5 * c14 + u6 * c14;
    t6 =  u5 * c14 + u6 * c14;
    t7 =  u7;

    out[ 0 ] = t0 + t7;
    out[ 1 ] = t1 + t6;
    out[ 2 ] = t2 + t5;
    out[ 3 ] = t3 + t4;
    out[ 4 ] = t3 - t4;
    out[ 5 ] = t2 - t5;
    out[ 6 ] = t1 - t6;
    out[ 7 ] = t0 - t7;
    return 0;
}

/* 求出轉置矩陣 */
int tenchi(double *mat,int n)
{
    int x,y;
    double tmp;

    for(y=0;y<n;y++) {
        for(x=0;x<n;x++) {
            if(x<y) {
                tmp=mat[x+y*n];
                mat[x+y*n]=mat[y+x*n];
                mat[y+x*n]=tmp;
            }
        }
    }
    return 0;
}

/* 讀入圖像資料 */
int WINAPI GetPicture(
              LPSTR file_name,long len,unsigned int flag,
              HANDLE *pHBInfo,HANDLE *pHBm,
              FARPROC lpPrgressCallback,long lData)
{
    unsigned int sig_read = 0;
    int i;
    int mx,my,mmx,dep;
    int mode;

    HFILE fp;

    BITMAPINFOHEADER *bmi;
    BITMAPINFO *bm;
    RGBQUAD ipal[256];
    byte *image;

    mode = flag & 7;
    *pHBInfo=NULL;
    *pHBm=NULL;
    if (mode == 0) {
        readmode=0;             /* 從檔案讀入 */
    } else if (mode == 1) {
        readmode=1;             /* 從記憶體讀入 */
        return -1;              /* 表不支援 */
    } else {
        return -1;
    }

    if(readmode==0) {
        if ((fp = _lopen(file_name,OF_READ))==HFILE_ERROR)
            return 6;
    }

    /* 讀出圖像大小資訊 */
    getImgInfo(&mx,&my,&dep,fp);

    /* 製作圖像資料區域 */
    mmx=(mx*3+3)/4*4;
    *pHBInfo=GlobalAlloc(GHND,sizeof(BITMAPINFOHEADER)+256*sizeof(RGBQUAD));
    bmi=GlobalLock(*pHBInfo);
    set_defaultBMI(bmi);
    bmi->biWidth=mx;
    bmi->biHeight=my;
    bmi->biBitCount=dep;
    *pHBm=GlobalAlloc(GHND,(mmx) * (my+1));
    if(*pHBm==NULL)
        return 4;
    bm=(BITMAPINFO*)bmi;
    for(i=0;i<256;i++) {
        bm->bmiColors[i]=ipal[i];
    }
    image=GlobalLock(*pHBm);
    if (!image)
        return 5;
    decode(fp,image,mx,my);

    MYlclose(fp);
    GlobalUnlock(*pHBInfo);
    GlobalUnlock(*pHBm);

    return 0;
}

/* 讀入預覽圖像 */
int WINAPI GetPreview(LPSTR buf,long len,unsigned int flag,
              HANDLE *pHBInfo,HANDLE *pHBm,
              FARPROC lpPrgressCallback,long lData)
{
    return -1;
}

/* 取得圖像資訊 */
int WINAPI GetPictureInfo(
    LPSTR buf,long len,unsigned int flag,struct PictureInfo *lpInfo)
{
    HFILE fp;
    int mode;
    int wt,ht,dep;

    mode = flag & 7;
    if (mode == 0) {
    } else if (mode == 1) {
        return -1;
    } else {
        return -1;
    }
    if((fp=_lopen(buf,OF_READ))==HFILE_ERROR) return 8;
    _llseek(fp,len,0);

    getImgInfo(&wt,&ht,&dep,fp);
    dep=24;

    lpInfo->left=0;
    lpInfo->top=0;
    lpInfo->width=wt;
    lpInfo->height=ht;
    lpInfo->x_density=0;
    lpInfo->y_density=0;
    lpInfo->colorDepth=dep;
    lpInfo->hInfo = NULL;
    _lclose(fp);
    return 0;
}
